############################################################################
# File:     makefile
#
# Purpose:  Generated makefile for the WilliamsCRC project,
#           for the GCC 4.2 (UNIX) compiler
#           on the Unix platform
#
# Created:  7th January 2021
# Updated:  31st December 2023
#
############################################################################


############################################################################
# environment check

ifndef STLSOFT
$(error STLSOFT must be defined)
endif # !STLSOFT

############################################################################
# symbols

########################################
# project & compiler version

COMP_TAG                    =   gcc42
ARCH_TAG                    =
OS_TAG                      =
PROJ_TAG                    =   SynesisSoftware.WilliamsCRC
PROJ_VER_MAJOR              =   1
PROJ_MOD_TAG                =   core
PROJ_TAG_VER                =   $(PROJ_TAG).$(PROJ_VER_MAJOR).$(PROJ_MOD_TAG)
COMP_ARCH_OS_TAG            =   $(COMP_TAG)$(OS_TAG)$(ARCH_TAG)

PROJ_MAKEFILE_NAME          =   makefile

########################################
# directories

PROJ_BASE_DIR               =   ../..
PROJ_BIN_DIR                =   $(PROJ_BASE_DIR)/bin
PROJ_INCLUDE_DIR            =   $(PROJ_BASE_DIR)/include
PROJ_LIB_DIR                =   $(PROJ_BASE_DIR)/lib
PROJ_OBJ_DIR                =   .
PROJ_SRC_DIR                =   $(PROJ_BASE_DIR)/src
PROJ_EXAMPLES_DIR           =   $(PROJ_BASE_DIR)/examples
PROJ_SAMPLES_DIR            =   $(PROJ_BASE_DIR)/samples
PROJ_TEST_ROOT_DIR          =   $(PROJ_BASE_DIR)/test
PROJ_TEST_COMPONENT_DIR     =   $(PROJ_TEST_ROOT_DIR)/component
PROJ_TEST_PERFORMANCE_DIR   =   $(PROJ_TEST_ROOT_DIR)/performance
PROJ_TEST_SCRATCH_DIR       =   $(PROJ_TEST_ROOT_DIR)/scratch
PROJ_TEST_UNIT_DIR          =   $(PROJ_TEST_ROOT_DIR)/unit

########################################
# tools

CC                          =   gcc
CPPC                        =   g++
AR                          =   ar
LD                          =   g++
RM                          =   rm -f
CP                          =   cp
RC                          =

########################################
# tool arguments


# lib

LIBS_LEADER                 =

# lib paths

ENV_LIBPATHS                =
COMMON_LIBPATHS             =


LIBPATHS=\
 $(LIBS_LEADER)\
 $(COMMON_LIBPATHS)\
 $(ENV_LIBPATHS)\
 \


# lib names

VARIANT_LIB_COMMON          =

TARGET_LIB_MT_D = \
 -lpthread \
 \

TARGET_LIB_MT_R = \
 -lpthread \
 \

TARGET_LIB_ST_D = \
  \
 \

TARGET_LIB_ST_R = \
  \
 \


# #defines

COMMON_DEFS                 =   -Dunix

CUSTOM_DEFS                 =

# includes

COMMON_INCLUDES             =



# CC flags

CC_F_COMPILE_ONLY           =   -c
CC_F_MAXIMUM_SPEED          =   -O3
CC_F_MINIMUM_SIZE           =   -O1
CC_F_NOLOGO                 =
CC_F_WARNING_ERR            =   -Werror
CC_F_WARNING_MAX            =   -Wall -pedantic -Wno-long-long

CC_FLAGS_BASE =\
 $(CC_F_NOLOGO)\
 $(CC_F_COMPILE_ONLY)\
 $(CC_F_WARNING_MAX)\
 $(CC_F_WARNING_ERR)\
 \

CC_FLAGS_MT_D =\
 $(CC_FLAGS_BASE)\
 \

CC_FLAGS_MT_R =\
 $(CC_FLAGS_BASE)\
 \

CC_FLAGS_ST_D =\
 $(CC_FLAGS_BASE)\
 \

CC_FLAGS_ST_R =\
 $(CC_FLAGS_BASE)\
 \



# CPPC flags

CPPC_F_COMPILE_ONLY         =   -c
CPPC_F_CXX_STD_VER          =   -std=c++11
CPPC_F_EXCEPTIONS_ON        =
CPPC_F_MAXIMUM_SPEED        =   -O3
CPPC_F_MINIMUM_SIZE         =   -O1
CPPC_F_NOLOGO               =
CPPC_F_RTTI_ON              =
CPPC_F_WARNING_ERR          =   -Werror
CPPC_F_WARNING_MAX          =   -Wall -pedantic -Wno-long-long

CPPC_FLAGS_BASE =\
 $(CPPC_F_COMPILE_ONLY)\
 $(CPPC_F_CXX_STD_VER)\
 $(CPPC_F_EXCEPTIONS_ON)\
 $(CPPC_F_NOLOGO)\
 $(CPPC_F_RTTI_ON)\
 $(CPPC_F_WARNING_ERR)\
 $(CPPC_F_WARNING_MAX)\
 \

CPPC_FLAGS_MT_D =\
 $(CPPC_FLAGS_BASE)\
 \

CPPC_FLAGS_MT_R =\
 $(CPPC_FLAGS_BASE)\
 \

CPPC_FLAGS_ST_D =\
 $(CPPC_FLAGS_BASE)\
 \

CPPC_FLAGS_ST_R =\
 $(CPPC_FLAGS_BASE)\
 \



# CC defines

CC_DEFS_BASE =\
 $(COMMON_DEFS)\
 $(CUSTOM_DEFS)\
 \


CC_DEFS_MT_D =\
 $(CC_DEFS_BASE)\
 \

CC_DEFS_MT_R =\
 $(CC_DEFS_BASE)\
 \

CC_DEFS_ST_D =\
 $(CC_DEFS_BASE)\
 \

CC_DEFS_ST_R =\
 $(CC_DEFS_BASE)\
 \


# CPPC defines

CPPC_DEFS_BASE =\
 $(COMMON_DEFS)\
 $(CUSTOM_DEFS)\
 \


CPPC_DEFS_MT_D =\
 $(CPPC_DEFS_BASE)\
 \

CPPC_DEFS_MT_R =\
 $(CPPC_DEFS_BASE)\
 \

CPPC_DEFS_ST_D =\
 $(CPPC_DEFS_BASE)\
 \

CPPC_DEFS_ST_R =\
 $(CPPC_DEFS_BASE)\
 \



# CC includes

CC_INCLUDES_BASE =\
 \
 -I$(PROJ_INCLUDE_DIR)\
 -I$(STLSOFT)/include\
 $(COMMON_INCLUDES)\
 \

CC_INCLUDES_MT_D =\
 $(CC_INCLUDES_BASE)\
 \

CC_INCLUDES_MT_R =\
 $(CC_INCLUDES_BASE)\
 \

CC_INCLUDES_ST_D =\
 $(CC_INCLUDES_BASE)\
 \

CC_INCLUDES_ST_R =\
 $(CC_INCLUDES_BASE)\
 \


# CPPC includes

CPPC_INCLUDES_BASE =\
 \
 -I$(PROJ_INCLUDE_DIR)\
 -I$(STLSOFT)/include\
 $(COMMON_INCLUDES)\
 \

CPPC_INCLUDES_MT_D =\
 $(CPPC_INCLUDES_BASE)\
 \

CPPC_INCLUDES_MT_R =\
 $(CPPC_INCLUDES_BASE)\
 \

CPPC_INCLUDES_ST_D =\
 $(CPPC_INCLUDES_BASE)\
 \

CPPC_INCLUDES_ST_R =\
 $(CPPC_INCLUDES_BASE)\
 \


# CC args (= flags + defines + includes)

CC_ARGS_MT_D=\
 $(CC_FLAGS_MT_D)\
 -D_REENTRANT -D_DEBUG -UNDEBUG\
 $(CC_DEFS_MT_D)\
 -DXTESTS_NO_IMPLICIT_LINK\
 $(CC_INCLUDES_MT_D)
CC_ARGS_MT_R=\
 $(CC_FLAGS_MT_R)\
 -D_REENTRANT -DNDEBUG -U_DEBUG $(CC_F_MAXIMUM_SPEED)\
 $(CC_DEFS_MT_R)\
 -DXTESTS_NO_IMPLICIT_LINK\
 $(CC_INCLUDES_MT_R)
CC_ARGS_ST_D=\
 $(CC_FLAGS_ST_D)\
 -D_DEBUG -UNDEBUG\
 $(CC_DEFS_ST_D)\
 -DXTESTS_NO_IMPLICIT_LINK\
 $(CC_INCLUDES_ST_D)
CC_ARGS_ST_R=\
 $(CC_FLAGS_ST_R)\
 -DNDEBUG -U_DEBUG $(CC_F_MAXIMUM_SPEED)\
 $(CC_DEFS_ST_R)\
 -DXTESTS_NO_IMPLICIT_LINK\
 $(CC_INCLUDES_ST_R)

# CPPC args (= flags + defines + includes)

CPPC_ARGS_MT_D=\
 $(CPPC_FLAGS_MT_D)\
 -D_REENTRANT -D_DEBUG -UNDEBUG\
 $(CPPC_DEFS_MT_D)\
 -DXTESTS_NO_IMPLICIT_LINK\
 $(CPPC_INCLUDES_MT_D)

CPPC_ARGS_CORE_MT_D=\
 -I$(PROJ_SRC_DIR)/wcrc\
 $(CPPC_ARGS_MT_D)\

CPPC_ARGS_MT_R=\
 $(CPPC_FLAGS_MT_R)\
 -D_REENTRANT -DNDEBUG -U_DEBUG $(CPPC_F_MAXIMUM_SPEED)\
 $(CPPC_DEFS_MT_R)\
 -DXTESTS_NO_IMPLICIT_LINK\
 $(CPPC_INCLUDES_MT_R)

CPPC_ARGS_CORE_MT_R=\
 -I$(PROJ_SRC_DIR)/wcrc\
 $(CPPC_ARGS_MT_R)\

CPPC_ARGS_ST_D=\
 $(CPPC_FLAGS_ST_D)\
 -D_DEBUG -UNDEBUG\
 $(CPPC_DEFS_ST_D)\
 -DXTESTS_NO_IMPLICIT_LINK\
 $(CPPC_INCLUDES_ST_D)

CPPC_ARGS_CORE_ST_D=\
 -I$(PROJ_SRC_DIR)/wcrc\
 $(CPPC_ARGS_ST_D)\

CPPC_ARGS_ST_R=\
 $(CPPC_FLAGS_ST_R)\
 -DNDEBUG -U_DEBUG $(CPPC_F_MAXIMUM_SPEED)\
 $(CPPC_DEFS_ST_R)\
 -DXTESTS_NO_IMPLICIT_LINK\
 $(CPPC_INCLUDES_ST_R)

CPPC_ARGS_CORE_ST_R=\
 -I$(PROJ_SRC_DIR)/wcrc\
 $(CPPC_ARGS_ST_R)\



# AR args

AR_ARGS                     =


# LD args

LD_F_NOLOGO                 =

LD_FLAGS_BASE =\
 $(LD_F_NOLOGO)\
 \

LD_FLAGS_MT_D =\
 $(LD_FLAGS_BASE)\
 \

LD_FLAGS_MT_R =\
 $(LD_FLAGS_BASE)\
 \

LD_FLAGS_ST_D =\
 $(LD_FLAGS_BASE)\
 \

LD_FLAGS_ST_R =\
 $(LD_FLAGS_BASE)\
 \


LD_INCLUDES_BASE =\
 $(LIBPATHS)\
 \

LD_INCLUDES_MT_D =\
 $(LD_INCLUDES_BASE)\
 \

LD_INCLUDES_MT_R =\
 $(LD_INCLUDES_BASE)\
 \

LD_INCLUDES_ST_D =\
 $(LD_INCLUDES_BASE)\
 \

LD_INCLUDES_ST_R =\
 $(LD_INCLUDES_BASE)\
 \


LD_ARGS_MT_D                =   $(LD_FLAGS_MT_D) $(LD_INCLUDES_MT_D)
LD_ARGS_MT_R                =   $(LD_FLAGS_MT_R) $(LD_INCLUDES_MT_R)
LD_ARGS_ST_D                =   $(LD_FLAGS_ST_D) $(LD_INCLUDES_ST_D)
LD_ARGS_ST_R                =   $(LD_FLAGS_ST_R) $(LD_INCLUDES_ST_R)

############################################################################
# names

############################################################
# targets

########################################
# libraries

# core
LIB_CORE_MT_D               =   $(PROJ_LIB_DIR)/lib$(PROJ_TAG_VER).$(COMP_ARCH_OS_TAG).mt.debug.a
LIB_CORE_MT_R               =   $(PROJ_LIB_DIR)/lib$(PROJ_TAG_VER).$(COMP_ARCH_OS_TAG).mt.a
LIB_CORE_ST_D               =   $(PROJ_LIB_DIR)/lib$(PROJ_TAG_VER).$(COMP_ARCH_OS_TAG).debug.a
LIB_CORE_ST_R               =   $(PROJ_LIB_DIR)/lib$(PROJ_TAG_VER).$(COMP_ARCH_OS_TAG).a

TARGETS_LIB_CORE=\
 $(LIB_CORE_MT_D)\
 $(LIB_CORE_MT_R)\
 $(LIB_CORE_ST_D)\
 $(LIB_CORE_ST_R)\
 \

########################################
# examples


########################################
# tests

##############################
# component tests


##############################
# scratch tests

TARG_TEST_SCRT_flchksm_MT_D =   $(PROJ_BIN_DIR)/$(PROJ_TAG_VER).test.scratch.file_checksum.$(COMP_ARCH_OS_TAG).mt.debug
TARG_TEST_SCRT_flchksm_MT_R =   $(PROJ_BIN_DIR)/$(PROJ_TAG_VER).test.scratch.file_checksum.$(COMP_ARCH_OS_TAG).mt
TARG_TEST_SCRT_flchksm_ST_D =   $(PROJ_BIN_DIR)/$(PROJ_TAG_VER).test.scratch.file_checksum.$(COMP_ARCH_OS_TAG).debug
TARG_TEST_SCRT_flchksm_ST_R =   $(PROJ_BIN_DIR)/$(PROJ_TAG_VER).test.scratch.file_checksum.$(COMP_ARCH_OS_TAG)

TARGETS_TEST_SCRATCH=\
 $(TARG_TEST_SCRT_flchksm_MT_D)\
 $(TARG_TEST_SCRT_flchksm_MT_R)\
 $(TARG_TEST_SCRT_flchksm_ST_D)\
 $(TARG_TEST_SCRT_flchksm_ST_R)\
 \

##############################
# unit tests


############################################################
# objects

########################################
# libraries

# core

OBJ_lib_core_MT_D = $(PROJ_OBJ_DIR)/$(PROJ_TAG).core.mt.debug.o

OBJ_CORE_MT_D=\
 $(OBJ_lib_core_MT_D)\
 \

OBJ_lib_core_MT_R = $(PROJ_OBJ_DIR)/$(PROJ_TAG).core.mt.o

OBJ_CORE_MT_R=\
 $(OBJ_lib_core_MT_R)\
 \

OBJ_lib_core_ST_D = $(PROJ_OBJ_DIR)/$(PROJ_TAG).core.debug.o

OBJ_CORE_ST_D=\
 $(OBJ_lib_core_ST_D)\
 \

OBJ_lib_core_ST_R = $(PROJ_OBJ_DIR)/$(PROJ_TAG).core.o

OBJ_CORE_ST_R=\
 $(OBJ_lib_core_ST_R)\
 \


########################################
# examples


########################################
# tests

##############################
# component tests


##############################
# scratch tests

OBJ_TEST_SCRT_flchksm_MT_D  =   $(PROJ_OBJ_DIR)/test.scratch.file_checksum.mt.debug.o
OBJ_TEST_SCRT_flchksm_MT_R  =   $(PROJ_OBJ_DIR)/test.scratch.file_checksum.mt.o
OBJ_TEST_SCRT_flchksm_ST_D  =   $(PROJ_OBJ_DIR)/test.scratch.file_checksum.debug.o
OBJ_TEST_SCRT_flchksm_ST_R  =   $(PROJ_OBJ_DIR)/test.scratch.file_checksum.o

##############################
# unit tests


############################################################################
# targets

# primary

_default:                   build

# infrastructure

check.lib.dir:              $(PROJ_MAKEFILE_NAME)
	@-mkdir -p $(PROJ_LIB_DIR)

check.bin.dir:              $(PROJ_MAKEFILE_NAME)
	@-mkdir -p $(PROJ_BIN_DIR)


build.libs.core: \
 check.lib.dir \
 $(TARGETS_LIB_CORE) \
 \

build.libs: \
 build.libs.core \
 \

build.test.unit:

build.test.component:

build.test.scratch: \
 check.bin.dir \
 $(TARGETS_TEST_SCRATCH) \
 \


build.test: \
 build.test.unit \
 build.test.component \
 build.test.scratch \
 \

build.examples:

build.samples:


build: \
 compile \
 build.libs \
 build.test \
 build.examples \
 build.samples \
 \

compile: \
 \

clean.libs.core:
	@echo Cleaning Core libraries ...
	@-$(RM) $(LIB_CORE_MT_D)
	@-$(RM) $(LIB_CORE_MT_R)
	@-$(RM) $(LIB_CORE_ST_D)
	@-$(RM) $(LIB_CORE_ST_R)
	@-$(RM) $(OBJ_CORE_MT_D)
	@-$(RM) $(OBJ_CORE_MT_R)
	@-$(RM) $(OBJ_CORE_ST_D)
	@-$(RM) $(OBJ_CORE_ST_R)

clean.libs.all: \
 clean.libs.core \
 \

clean.test.component:

clean.test.scratch:
	@echo cleaning Test:Scratch libraries ...
	$(RM) test.scratch*.o
	$(RM) $(PROJ_BIN_DIR)/$(PROJ_TAG_VER).test.scratch.*.$(COMP_ARCH_OS_TAG).mt.debug
	$(RM) $(PROJ_BIN_DIR)/$(PROJ_TAG_VER).test.scratch.*.$(COMP_ARCH_OS_TAG).mt
	$(RM) $(PROJ_BIN_DIR)/$(PROJ_TAG_VER).test.scratch.*.$(COMP_ARCH_OS_TAG).debug
	$(RM) $(PROJ_BIN_DIR)/$(PROJ_TAG_VER).test.scratch.*.$(COMP_ARCH_OS_TAG)

clean.test.unit:
	@echo cleaning Test:Unit libraries ...
	$(RM) test.unit*.o
	$(RM) $(PROJ_BIN_DIR)/$(PROJ_TAG_VER).test.unit.*.$(COMP_ARCH_OS_TAG).mt.debug
	$(RM) $(PROJ_BIN_DIR)/$(PROJ_TAG_VER).test.unit.*.$(COMP_ARCH_OS_TAG).mt
	$(RM) $(PROJ_BIN_DIR)/$(PROJ_TAG_VER).test.unit.*.$(COMP_ARCH_OS_TAG).debug
	$(RM) $(PROJ_BIN_DIR)/$(PROJ_TAG_VER).test.unit.*.$(COMP_ARCH_OS_TAG)

clean.test: \
 clean.test.component \
 clean.test.scratch \
 clean.test.unit \
 \

clean.examples:

clean.samples:

clean: \
 clean.libs.all \
 clean.test \
 clean.examples \
 clean.samples \
 \

test: \
 \




############################################################################
# build targets

##################################################
# libraries

########################################
# core library

$(LIB_CORE_MT_D): $(OBJ_CORE_MT_D) $(PROJ_MAKEFILE_NAME)
	@-mkdir -p $(PROJ_LIB_DIR)
	$(AR) $(AR_ARGS) -r $@ $(OBJ_CORE_MT_D)

$(OBJ_lib_core_MT_D): $(PROJ_MAKEFILE_NAME) $(PROJ_SRC_DIR)/WilliamsCRC.cpp
	$(CPPC) $(CPPC_ARGS_CORE_MT_D) $(CPPC_INCLUDES) -o $@ $(PROJ_SRC_DIR)/WilliamsCRC.cpp

$(LIB_CORE_MT_R): $(OBJ_CORE_MT_R) $(PROJ_MAKEFILE_NAME)
	@-mkdir -p $(PROJ_LIB_DIR)
	$(AR) $(AR_ARGS) -r $@ $(OBJ_CORE_MT_R)

$(OBJ_lib_core_MT_R): $(PROJ_MAKEFILE_NAME) $(PROJ_SRC_DIR)/WilliamsCRC.cpp
	$(CPPC) $(CPPC_ARGS_CORE_MT_R) $(CPPC_INCLUDES) -o $@ $(PROJ_SRC_DIR)/WilliamsCRC.cpp

$(LIB_CORE_ST_D): $(OBJ_CORE_ST_D) $(PROJ_MAKEFILE_NAME)
	@-mkdir -p $(PROJ_LIB_DIR)
	$(AR) $(AR_ARGS) -r $@ $(OBJ_CORE_ST_D)

$(OBJ_lib_core_ST_D): $(PROJ_MAKEFILE_NAME) $(PROJ_SRC_DIR)/WilliamsCRC.cpp
	$(CPPC) $(CPPC_ARGS_CORE_ST_D) $(CPPC_INCLUDES) -o $@ $(PROJ_SRC_DIR)/WilliamsCRC.cpp

$(LIB_CORE_ST_R): $(OBJ_CORE_ST_R) $(PROJ_MAKEFILE_NAME)
	@-mkdir -p $(PROJ_LIB_DIR)
	$(AR) $(AR_ARGS) -r $@ $(OBJ_CORE_ST_R)

$(OBJ_lib_core_ST_R): $(PROJ_MAKEFILE_NAME) $(PROJ_SRC_DIR)/WilliamsCRC.cpp
	$(CPPC) $(CPPC_ARGS_CORE_ST_R) $(CPPC_INCLUDES) -o $@ $(PROJ_SRC_DIR)/WilliamsCRC.cpp

##################################################
# tests

##############################
# component tests

##############################
# scratch tests

$(TARG_TEST_SCRT_flchksm_MT_D):    \
		$(OBJ_TEST_SCRT_flchksm_MT_D)\
		$(LIB_CORE_MT_D)\
		$(LIB_SHWILD_MT_D)\
		$(LIB_XTESTS_MT_D)\
		$(PROJ_MAKEFILE_NAME)
	$(LD) $(LD_ARGS_MT_D) -o $@ \
		$(OBJ_TEST_SCRT_flchksm_MT_D)\
		$(LIB_CORE_MT_D)\
		$(LIB_SHWILD_MT_D)\
		$(LIB_XTESTS_MT_D)\
		$(TARGET_LIB_MT_D)

$(OBJ_TEST_SCRT_flchksm_MT_D): $(CORE_HEADERS) $(SHWILD_HEADERS) $(XTESTS_HEADERS) $(PROJ_MAKEFILE_NAME) $(PROJ_TEST_SCRATCH_DIR)/test.scratch.file_checksum/test.scratch.file_checksum.cpp
	$(CPPC) $(CPPC_ARGS_MT_D) -o $@ $(PROJ_TEST_SCRATCH_DIR)/test.scratch.file_checksum/test.scratch.file_checksum.cpp

$(TARG_TEST_SCRT_flchksm_MT_R):    \
		$(OBJ_TEST_SCRT_flchksm_MT_R)\
		$(LIB_CORE_MT_R)\
		$(LIB_SHWILD_MT_R)\
		$(LIB_XTESTS_MT_R)\
		$(PROJ_MAKEFILE_NAME)
	$(LD) $(LD_ARGS_MT_R) -o $@ \
		$(OBJ_TEST_SCRT_flchksm_MT_R)\
		$(LIB_CORE_MT_R)\
		$(LIB_SHWILD_MT_R)\
		$(LIB_XTESTS_MT_R)\
		$(TARGET_LIB_MT_R)

$(OBJ_TEST_SCRT_flchksm_MT_R): $(CORE_HEADERS) $(SHWILD_HEADERS) $(XTESTS_HEADERS) $(PROJ_MAKEFILE_NAME) $(PROJ_TEST_SCRATCH_DIR)/test.scratch.file_checksum/test.scratch.file_checksum.cpp
	$(CPPC) $(CPPC_ARGS_MT_R) -o $@ $(PROJ_TEST_SCRATCH_DIR)/test.scratch.file_checksum/test.scratch.file_checksum.cpp

$(TARG_TEST_SCRT_flchksm_ST_D):    \
		$(OBJ_TEST_SCRT_flchksm_ST_D)\
		$(LIB_CORE_ST_D)\
		$(LIB_SHWILD_ST_D)\
		$(LIB_XTESTS_ST_D)\
		$(PROJ_MAKEFILE_NAME)
	$(LD) $(LD_ARGS_ST_D) -o $@ \
		$(OBJ_TEST_SCRT_flchksm_ST_D)\
		$(LIB_CORE_ST_D)\
		$(LIB_SHWILD_ST_D)\
		$(LIB_XTESTS_ST_D)\
		$(TARGET_LIB_ST_D)

$(OBJ_TEST_SCRT_flchksm_ST_D): $(CORE_HEADERS) $(SHWILD_HEADERS) $(XTESTS_HEADERS) $(PROJ_MAKEFILE_NAME) $(PROJ_TEST_SCRATCH_DIR)/test.scratch.file_checksum/test.scratch.file_checksum.cpp
	$(CPPC) $(CPPC_ARGS_ST_D) -o $@ $(PROJ_TEST_SCRATCH_DIR)/test.scratch.file_checksum/test.scratch.file_checksum.cpp

$(TARG_TEST_SCRT_flchksm_ST_R):    \
		$(OBJ_TEST_SCRT_flchksm_ST_R)\
		$(LIB_CORE_ST_R)\
		$(LIB_SHWILD_ST_R)\
		$(LIB_XTESTS_ST_R)\
		$(PROJ_MAKEFILE_NAME)
	$(LD) $(LD_ARGS_ST_R) -o $@ \
		$(OBJ_TEST_SCRT_flchksm_ST_R)\
		$(LIB_CORE_ST_R)\
		$(LIB_SHWILD_ST_R)\
		$(LIB_XTESTS_ST_R)\
		$(TARGET_LIB_ST_R)

$(OBJ_TEST_SCRT_flchksm_ST_R): $(CORE_HEADERS) $(SHWILD_HEADERS) $(XTESTS_HEADERS) $(PROJ_MAKEFILE_NAME) $(PROJ_TEST_SCRATCH_DIR)/test.scratch.file_checksum/test.scratch.file_checksum.cpp
	$(CPPC) $(CPPC_ARGS_ST_R) -o $@ $(PROJ_TEST_SCRATCH_DIR)/test.scratch.file_checksum/test.scratch.file_checksum.cpp

##############################
# unit tests

############################### end of file ################################

